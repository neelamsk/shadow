/*
*  Copyright(c) 2012, budhitechno.com
*  http://www.budhitechno.com
*
* Licensed under the GPL license:
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*/

this.ImageShadow = function () { function e(e) { if (e.control != "" && e.control != undefined && e.control != "undefined" && e.control != null && e.control != "null") this.Config.control = e.control; else this.Config.control = ""; if (e.shadowColor != "" && e.shadowColor != undefined && e.shadowColor != "undefined" && e.shadowColor != null && e.shadowColor != "null") this.Config.shadowColor = e.shadowColor; else this.Config.shadowColor = "#999"; if (e.shadowBlur != "" && e.shadowBlur != undefined && e.shadowBlur != "undefined" && e.shadowBlur != null && e.shadowBlur != "null") this.Config.shadowBlur = e.shadowBlur; else this.Config.shadowBlur = 20; if (e.shadowOffsetX != "" && e.shadowOffsetX != undefined && e.shadowOffsetX != "undefined" && e.shadowOffsetX != null && e.shadowOffsetX != "null") this.Config.shadowOffsetX = e.shadowOffsetX; else this.Config.shadowOffsetX = 15; if (e.shadowOffsetY != "" && e.shadowOffsetY != undefined && e.shadowOffsetY != "undefined" && e.shadowOffsetY != null && e.shadowOffsetY != "null") this.Config.shadowOffsetY = e.shadowOffsetY; else this.Config.shadowOffsetY = 15; if (e.applyID != "" && e.applyID != undefined && e.applyID != "undefined" && e.applyID != null && e.applyID != "null") this.Config.applyID = e.applyID; else this.Config.applyID = false; if (e.applyCSS != "" && e.applyCSS != undefined && e.applyCSS != "undefined" && e.applyCSS != null && e.applyCSS != "null") this.Config.applyCSS = e.applyCSS; else this.Config.applyCSS = false; if (e.applyStyle != "" && e.applyStyle != undefined && e.applyStyle != "undefined" && e.applyStyle != null && e.applyStyle != "null") this.Config.applyStyle = e.applyStyle; else this.Config.applyStyle = false; if (e.beforeShadow != "" && e.beforeShadow != undefined && e.beforeShadow != "undefined" && e.beforeShadow != null && e.beforeShadow != "null") this.Config.beforeShadow = e.beforeShadow; else this.Config.beforeShadow = function () { }; if (e.afterShadow != "" && e.afterShadow != undefined && e.afterShadow != "undefined" && e.afterShadow != null && e.afterShadow != "null") this.Config.afterShadow = e.afterShadow; else this.Config.afterShadow = function () { }; this.CreateMagic() } this.Config = {}; this.CreateMagic = function () { if (this.Config.control.lastIndexOf("#", 0) != -1) { var e = document.getElementById(this.Config.control.replace("#", "")); CreateShadow(e, this.Config) } else if (this.Config.control.lastIndexOf(".", 0) != -1) { var t = document.getElementsByClassName(this.Config.control.replace(".", "")); var n = t.length; for (var r = n - 1; r >= 0; r--) { var e = t[r]; CreateShadow(e, this.Config) } } else { var t = document.getElementsByTagName(this.Config.control); var n = t.length; for (var r = n - 1; r >= 0; r--) { var e = t[r]; CreateShadow(e, this.Config) } } }; this.CreateShadow = function (e, t) { if (e.tagName.toLowerCase() == "img" && e.src != "") { var n = document.createElement("canvas"); var r = n.getContext("2d"); var i = 0; var s = 0; n.width = parseInt(e.offsetWidth); i = n.width; n.height = parseInt(e.offsetHeight); s = n.height; if (t.applyID == true) { n.id = e.id } if (t.applyCSS == true) { n.className = e.className } if (t.applyStyle == true) { n.style.cssText = e.style.cssText } var o = new Image; o.onload = function () { if (i != 0 && s != 0) { r.drawImage(this, 0, 0, i, s) } else { r.drawImage(this, 0, 0) } }; o.src = e.src; t.beforeShadow(t, e, n); r.shadowColor = t.shadowColor; r.shadowBlur = t.shadowBlur; r.shadowOffsetX = t.shadowOffsetX; r.shadowOffsetY = t.shadowOffsetY; e.parentNode.replaceChild(n, e); t.afterShadow(t, e, n) } }; return { Options: function (t) { return { Shadow: function () { e(t) } } } } }()